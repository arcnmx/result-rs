var searchIndex = {};
searchIndex["result"] = {"doc":"Helpers for dealing with nested `Result` and `Option` types. Convert a `Option<Result<T, E>>` to `Result<Option<T>, E>` and vice versa.","items":[[0,"prelude","result","Module that contains all extension traits useful for working with nested `Option` and `Result` types.",null,null],[8,"ResultOptionExt","","Extension trait for nested `Option` and `Result` types.",null,null],[16,"Out","","The inverted output type of the operation.",0,null],[10,"invert","","Inverts a nested `Option<Result<T, E>>` or `Result<Option<T>, E>`",0,null],[8,"ResultIteratorExt","","Extension trait for iterators that produce `Result` types",null,null],[16,"Val","","`Ok(Val)`",1,null],[16,"Err","","`Err(Err)`",1,null],[10,"next_invert","","`Iterator::next` inverted returns a `Result`.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"ResultOptionExt"],[8,"ResultIteratorExt"]]};
initSearch(searchIndex);
